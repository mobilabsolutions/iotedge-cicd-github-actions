---
name: CI

on: # yamllint disable-line rule:truthy
  push:
    branches:
      - main
  workflow_dispatch:

env:
  ACR_IMAGE_PATH_FRONTEND: ${{ secrets.ACR_LOGIN_SERVER }}/frontendmodule:1.0.${{ github.run_number }}-amd64
  ACR_IMAGE_PATH_BACKEND: ${{ secrets.ACR_LOGIN_SERVER }}/backendmodule:1.0.${{ github.run_number }}-amd64

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"

      - name: Install dependencies
        run: |
          make install

      - name: Login to ACR
        uses: Azure/docker-login@v1
        with:
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}

      - name: Build backend docker image
        run: |
          cd ./EdgeSolution/modules/BackendModule
          docker build -t ${{env.ACR_IMAGE_PATH_BACKEND}} -f Dockerfile.amd64 .

      - name: Build frontend docker image
        run: |
          cd ./EdgeSolution/modules/FrontendModule
          docker build -t ${{env.ACR_IMAGE_PATH_FRONTEND}} -f Dockerfile.amd64 .

      - name: Push backend docker image
        run: |
          docker push ${{env.ACR_IMAGE_PATH_BACKEND}}

      - name: Push frontend docker image
        run: |
          docker push ${{env.ACR_IMAGE_PATH_FRONTEND}}
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Read variables from env file
        run: |
          cp ./EdgeSolution/.env_template ./EdgeSolution/.env
          cat ./EdgeSolution/.env
          sed -i 's/^#.*//' ./EdgeSolution/.env
          sed -i '/^$/d' ./EdgeSolution/.env
          sed -i 's%^ACR_USERNAME=.*%ACR_USERNAME=${{ secrets.ACR_USERNAME }}%' ./EdgeSolution/.env
          sed -i 's%^ACR_PASSWORD=.*%ACR_PASSWORD=${{ secrets.ACR_PASSWORD }}%' ./EdgeSolution/.env
          sed -i 's%^ACR_ADDRESS=.*%ACR_ADDRESS=${{ secrets.ACR_LOGIN_SERVER }}%' ./EdgeSolution/.env
          sed -i 's%^IOT_HUB_RESOURCE_ID=.*%IOT_HUB_RESOURCE_ID=${{ secrets.IOT_HUB_RESOURCE_ID }}%' ./EdgeSolution/.env
          cat ./EdgeSolution/.env

      # install iotedgedev
      - name: install iotedgedev
        run: |
          make install_iotedgedev
          make install_azure_iot

      # Changing the docker image version based on the current build number
      - name: Change docker image versions
        run: |
          cd ${GITHUB_WORKSPACE}/EdgeSolution/modules/FrontendModule
          cat module.json | jq '.image.tag.version =  $v' --arg v '1.0.${{github.run_number}}' | sponge module.json
          cd ${GITHUB_WORKSPACE}/EdgeSolution/modules/BackendModule
          cat module.json | jq '.image.tag.version =  $v' --arg v '1.0.${{github.run_number}}' | sponge module.json

      # generating iotedge config file
      - name: generate deployment config json
        run: |
          cd ./EdgeSolution
          cat .env
          iotedgedev genconfig -f ./deployment.template.json -P amd64

      # Creating the deployment of the modules using the config file generated in the above step
      - name: Create modules deployment
        env:
          IOTHUB_CONN_STRING: ${{ secrets.IOTHUB_CONN_STRING}}
        run: |
          cd ./EdgeSolution/config
          az iot edge deployment create -d "${{ github.run_number }}" -l "${{env.IOTHUB_CONN_STRING}}" -k deployment.amd64.json -t "tags.environment='demodevice'"
